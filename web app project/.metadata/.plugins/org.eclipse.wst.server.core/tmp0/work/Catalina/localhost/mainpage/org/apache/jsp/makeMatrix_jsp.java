/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/7.0.79
 * Generated at: 2017-11-20 14:28:39 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.util.*;
import java.io.BufferedReader;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.io.PrintWriter;
import java.io.File;
import java.io.Writer;
import java.io.BufferedWriter;
import java.io.FileWriter;
import java.util.Iterator;

public final class makeMatrix_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent {

 
			
  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\n");
      out.write("<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\">\n");
      out.write("<html>\n");
      out.write("<head>\n");
      out.write("<meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">\n");
      out.write("<title>Insert title here</title>\n");
      out.write("</head>\n");
      out.write("\t<body>\n");
      out.write("\t\t\t\n");
      out.write("\t\t\t\n");
      out.write("\t\t\t\n");
      out.write("\t\t\t\n");
      out.write("\t\t\t\n");
      out.write("\t\t\t\n");
      out.write("\t\t\t\n");
      out.write("\t\t\t\n");
      out.write("\t\t\t\n");
      out.write("\t\t\t\n");
      out.write("\t\t\t\n");
      out.write("\t\t\t\n");
      out.write("\t\t\t\n");
      out.write("\t\t\t");
      out.write("\n");
      out.write("\t\t\t\n");
      out.write("\t\t\t");
 String user =(String)session.getAttribute("userId");  
      out.write("\n");
      out.write("\t\t\t");
String userN =(String)session.getAttribute("userName");  
      out.write("\n");
      out.write("\t\t\t\n");
      out.write("\t\t\t");
 
				  /* looking for the user's file through the user's ID */
				  StringBuilder temp = new StringBuilder();
				  temp.append(user);
				  temp.append(".txt");
				  String userFilePath = temp.toString();
				  
				  List<String> textFiles = new ArrayList<String>();
				  File dir = new File("/Users/Chiaoysbaby/desktop/pro1/mainpage");
				  for (File file : dir.listFiles()) {
				    if (file.getName().endsWith((userFilePath))) {
				      textFiles.add(file.getName());
				    }
				  }
				  ListIterator<String> listIterator = null;
				 
				  listIterator = textFiles.listIterator();
				  StringBuffer Userfile=  new StringBuffer();
				  
				  while(listIterator.hasNext()){
			           /*  System.out.println(listIterator.next()); */
			            Userfile.append(listIterator.next());
			        }
				  String userFile = Userfile.toString(); 
				  int filesize = userFile.length();
				  System.out.println("found file ------>" +Userfile +"<" );
				  System.out.println("filesize ------>" +filesize );
				  
				  
				  
				  
		  
      out.write(" \n");
      out.write("\t\t\n");
 
			
if(filesize != 0){
			
			String filePath;
				
				if(user == null){
					filePath = "/Users/Chiaoysbaby/desktop/pro1/mainpage/user1.txt";			
				}
				else{
					StringBuilder originalLine = new StringBuilder();
					originalLine.append("/Users/Chiaoysbaby/desktop/pro1/mainpage/");
					StringBuilder userName = new StringBuilder();
					userName.append(user);
					userName.append(".txt");
					
					originalLine.append(userName);
					System.out.println("store to this path: "+">" +originalLine +"<"    );
					
					String newStr = originalLine.toString();
					filePath = new String(newStr); 

				}
				
				String respberryNum= "";
				String redtomatoNum= "";
				String yellowtomatoNum= "";
				String appleNum= "";
				String pearNum= "";
								
				BufferedReader it = new BufferedReader(new FileReader(filePath));
				HashMap<String, LinkedList<String> > map = new  HashMap<String, LinkedList<String> >();
								
					String line = it.readLine();
	
					while(line != null){
						System.out.println("first read --> " + line);
						int size = line.length();
			
						String unit1 = Character.toString(line.charAt(0));
						String unit2 = Character.toString(line.charAt(1));
	
						if(unit1.equals("r") && unit2.equals("a")  ){
							LinkedList link = new LinkedList();
							respberryNum = line.substring(10,size);	
							String respberryPrice = "3";
							String imagePath = "raspberry.jpg";
							link.add(imagePath);
							link.add(respberryPrice);  // add price of respberry
							link.add(respberryNum);   // add quality 
							int total = Integer.parseInt(respberryPrice) * Integer.parseInt(respberryNum);
							String totalprice = Integer.toString(total);
							link.add(totalprice);
							
							map.put("raspberry",link);
						}
						if(unit1.equals("r") && unit2.equals("e")){
							LinkedList link = new LinkedList();
							String redtomatoPrice = "5";
							String imagePath = "tomatos.jpg";
							redtomatoNum = line.substring(10,size);
							int total = Integer.parseInt(redtomatoPrice)*Integer.parseInt(redtomatoNum);
							String totalPrice  = Integer.toString(total);
							link.add(imagePath); //add image src
							link.add(redtomatoPrice); // add price
							link.add(redtomatoNum); // add quality 
							link.add(totalPrice); // add  total price
							map.put("redtomato",link);
						}
						if(unit1.equals("y")){
							LinkedList link = new LinkedList();
							String yellowtomatoPrice = "5";
							String imagePath = "tomatos.jpg";
	 						yellowtomatoNum = line.substring(13, size);
	 						int a = Integer.parseInt(yellowtomatoPrice);
	 						int b = Integer.parseInt(yellowtomatoNum);
	 	 					int total = a*b;
							String totalPrice  = Integer.toString(total);
							link.add(imagePath); //add image src
							link.add(yellowtomatoPrice); // add price
							link.add(yellowtomatoNum); // add quality 
							link.add(totalPrice); // add  total price							
							map.put("yellowtomato",link); 
						}
						if(unit1.equals("a")){
							LinkedList link = new LinkedList();
							String applePrice = "1";
							String imagePath = "applenew.jpg";
							appleNum = line.substring(6, size);
						 	int a = Integer.parseInt(applePrice);
							int b = Integer.parseInt(appleNum); 
							int total = a*b;							
		 					String totalPrice  = Integer.toString(total);
							link.add(imagePath); //add image src
							link.add(applePrice); // add price
							link.add(appleNum); // add quality 
							link.add(totalPrice); // add  total price	 
													 
							map.put("apple",link);
						}
						if(unit1.equals("p")){
							LinkedList link = new LinkedList();
							String pearPrice = "1";
							String imagePath = "pearsnew.jpg";							
							pearNum  = line.substring(5, size);		
							int a = Integer.parseInt(pearPrice);
							int b = Integer.parseInt(pearNum);
							int total = a*b;
							
							String totalPrice  = Integer.toString(total);
							link.add(imagePath); //add image src
							link.add(pearPrice); // add price
							link.add(pearNum); // add quality 
							link.add(totalPrice); // add  total price								
							map.put("pear",link);  
						}

						line = it.readLine();
					
					}
					
		 
				
      out.write("\n");
      out.write("\t\t\t\t\n");
      out.write("\t\t\t\t\n");
      out.write("\t\t\t\t");

				/* store values in  keylist[][] */
				Set set = map.keySet();
			    int mapsize = map.size();
				Iterator current = set.iterator();
				int size = map.size();
				int row = size;
				int col = 5;
				String[][] keylist = new String[size][5];
				
				
				int count = 0;
				int NumberOfItem = 0;
				while(current.hasNext()){
					String key = current.next().toString();
					int s = 0;
					keylist[count][s] = key;  // store key  in [][0] 
					s++;
					
 	 				for( int i = 0; i< 4; i++){
						keylist[count][s] = map.get(key).get(i);   
						
						if(s == 3){
							System.out.println("Print Quality: " + keylist[count][s]);
							NumberOfItem = NumberOfItem  + Integer.parseInt( keylist[count][s]);
						} 
						s++;					
					}   			
					count ++;
				}

 				StringBuffer values = new StringBuffer();				
				
 				for(int i =0; i<row; i++){
 					 values.append('[');
					for(int j = 0; j< col; j++){
					
						values.append('"').append(keylist[i][j]  ).append('"');
						 if (j<(col-1) ) {
						        values.append(',');
						    }
					}
					
					 values.append(']');
					 if( i<(row-1)){
						 values.append(',');	 
					 }
					 
				} 
				
				/* System.out.println("value: " +values );    */
				String sendStr = values.toString();
				session.setAttribute("itMatrix",sendStr); 
				
				String ROW = Integer.toString(row);
				session.setAttribute("row",ROW); 
				
				// pass the quality of items in shopping cart
				session.setAttribute("NumberOfItem",NumberOfItem); 
				
}	else{
	
			String sendStr ="0";
			session.setAttribute("itMatrix",sendStr); 
			
			String ROW = "0";
			session.setAttribute("row",ROW); 
	
}
	
			
			
      out.write("\t \n");
      out.write("\t\t\t\n");
      out.write("\t\t\t \n");
      out.write("\t\n");
      out.write("\t</body>\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
